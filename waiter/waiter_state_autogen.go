// automatically generated by stateify.

package waiter

import (
	"gvisor.dev/gvisor/pkg/state"
)

func (e *Entry) StateTypeName() string {
	return "pkg/waiter.Entry"
}

func (e *Entry) StateFields() []string {
	return []string{
		"Callback",
		"mask",
		"waiterEntry",
	}
}

func (e *Entry) beforeSave() {}

func (e *Entry) StateSave(stateSinkObject state.Sink) {
	e.beforeSave()
	stateSinkObject.Save(0, &e.Callback)
	stateSinkObject.Save(1, &e.mask)
	stateSinkObject.Save(2, &e.waiterEntry)
}

func (e *Entry) afterLoad() {}

func (e *Entry) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &e.Callback)
	stateSourceObject.Load(1, &e.mask)
	stateSourceObject.Load(2, &e.waiterEntry)
}

func (q *Queue) StateTypeName() string {
	return "pkg/waiter.Queue"
}

func (q *Queue) StateFields() []string {
	return []string{}
}

func (q *Queue) beforeSave() {}

func (q *Queue) StateSave(stateSinkObject state.Sink) {
	q.beforeSave()
	if !state.IsZeroValue(&q.list) {
		state.Failf("list is %#v, expected zero", &q.list)
	}
}

func (q *Queue) afterLoad() {}

func (q *Queue) StateLoad(stateSourceObject state.Source) {
}

func (w *waiterList) StateTypeName() string {
	return "pkg/waiter.waiterList"
}

func (w *waiterList) StateFields() []string {
	return []string{
		"head",
		"tail",
	}
}

func (w *waiterList) beforeSave() {}

func (w *waiterList) StateSave(stateSinkObject state.Sink) {
	w.beforeSave()
	stateSinkObject.Save(0, &w.head)
	stateSinkObject.Save(1, &w.tail)
}

func (w *waiterList) afterLoad() {}

func (w *waiterList) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &w.head)
	stateSourceObject.Load(1, &w.tail)
}

func (w *waiterEntry) StateTypeName() string {
	return "pkg/waiter.waiterEntry"
}

func (w *waiterEntry) StateFields() []string {
	return []string{
		"next",
		"prev",
	}
}

func (w *waiterEntry) beforeSave() {}

func (w *waiterEntry) StateSave(stateSinkObject state.Sink) {
	w.beforeSave()
	stateSinkObject.Save(0, &w.next)
	stateSinkObject.Save(1, &w.prev)
}

func (w *waiterEntry) afterLoad() {}

func (w *waiterEntry) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &w.next)
	stateSourceObject.Load(1, &w.prev)
}

func init() {
	state.Register((*Entry)(nil))
	state.Register((*Queue)(nil))
	state.Register((*waiterList)(nil))
	state.Register((*waiterEntry)(nil))
}
