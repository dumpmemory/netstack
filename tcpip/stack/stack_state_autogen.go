// automatically generated by stateify.

package stack

import (
	"gvisor.dev/gvisor/pkg/state"
)

func (x *linkAddrEntryList) StateTypeName() string {
	return "pkg/tcpip/stack.linkAddrEntryList"
}

func (x *linkAddrEntryList) StateFields() []string {
	return []string{
		"head",
		"tail",
	}
}

func (x *linkAddrEntryList) beforeSave() {}

func (x *linkAddrEntryList) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.head)
	m.Save(1, &x.tail)
}

func (x *linkAddrEntryList) afterLoad() {}

func (x *linkAddrEntryList) StateLoad(m state.Source) {
	m.Load(0, &x.head)
	m.Load(1, &x.tail)
}

func (x *linkAddrEntryEntry) StateTypeName() string {
	return "pkg/tcpip/stack.linkAddrEntryEntry"
}

func (x *linkAddrEntryEntry) StateFields() []string {
	return []string{
		"next",
		"prev",
	}
}

func (x *linkAddrEntryEntry) beforeSave() {}

func (x *linkAddrEntryEntry) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.next)
	m.Save(1, &x.prev)
}

func (x *linkAddrEntryEntry) afterLoad() {}

func (x *linkAddrEntryEntry) StateLoad(m state.Source) {
	m.Load(0, &x.next)
	m.Load(1, &x.prev)
}

func (x *PacketBufferList) StateTypeName() string {
	return "pkg/tcpip/stack.PacketBufferList"
}

func (x *PacketBufferList) StateFields() []string {
	return []string{
		"head",
		"tail",
	}
}

func (x *PacketBufferList) beforeSave() {}

func (x *PacketBufferList) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.head)
	m.Save(1, &x.tail)
}

func (x *PacketBufferList) afterLoad() {}

func (x *PacketBufferList) StateLoad(m state.Source) {
	m.Load(0, &x.head)
	m.Load(1, &x.tail)
}

func (x *PacketBufferEntry) StateTypeName() string {
	return "pkg/tcpip/stack.PacketBufferEntry"
}

func (x *PacketBufferEntry) StateFields() []string {
	return []string{
		"next",
		"prev",
	}
}

func (x *PacketBufferEntry) beforeSave() {}

func (x *PacketBufferEntry) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.next)
	m.Save(1, &x.prev)
}

func (x *PacketBufferEntry) afterLoad() {}

func (x *PacketBufferEntry) StateLoad(m state.Source) {
	m.Load(0, &x.next)
	m.Load(1, &x.prev)
}

func (x *TransportEndpointID) StateTypeName() string {
	return "pkg/tcpip/stack.TransportEndpointID"
}

func (x *TransportEndpointID) StateFields() []string {
	return []string{
		"LocalPort",
		"LocalAddress",
		"RemotePort",
		"RemoteAddress",
	}
}

func (x *TransportEndpointID) beforeSave() {}

func (x *TransportEndpointID) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.LocalPort)
	m.Save(1, &x.LocalAddress)
	m.Save(2, &x.RemotePort)
	m.Save(3, &x.RemoteAddress)
}

func (x *TransportEndpointID) afterLoad() {}

func (x *TransportEndpointID) StateLoad(m state.Source) {
	m.Load(0, &x.LocalPort)
	m.Load(1, &x.LocalAddress)
	m.Load(2, &x.RemotePort)
	m.Load(3, &x.RemoteAddress)
}

func (x *GSOType) StateTypeName() string {
	return "pkg/tcpip/stack.GSOType"
}

func (x *GSOType) StateFields() []string {
	return nil
}

func (x *GSO) StateTypeName() string {
	return "pkg/tcpip/stack.GSO"
}

func (x *GSO) StateFields() []string {
	return []string{
		"Type",
		"NeedsCsum",
		"CsumOffset",
		"MSS",
		"L3HdrLen",
		"MaxSize",
	}
}

func (x *GSO) beforeSave() {}

func (x *GSO) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.Type)
	m.Save(1, &x.NeedsCsum)
	m.Save(2, &x.CsumOffset)
	m.Save(3, &x.MSS)
	m.Save(4, &x.L3HdrLen)
	m.Save(5, &x.MaxSize)
}

func (x *GSO) afterLoad() {}

func (x *GSO) StateLoad(m state.Source) {
	m.Load(0, &x.Type)
	m.Load(1, &x.NeedsCsum)
	m.Load(2, &x.CsumOffset)
	m.Load(3, &x.MSS)
	m.Load(4, &x.L3HdrLen)
	m.Load(5, &x.MaxSize)
}

func (x *TransportEndpointInfo) StateTypeName() string {
	return "pkg/tcpip/stack.TransportEndpointInfo"
}

func (x *TransportEndpointInfo) StateFields() []string {
	return []string{
		"NetProto",
		"TransProto",
		"ID",
		"BindNICID",
		"BindAddr",
		"RegisterNICID",
	}
}

func (x *TransportEndpointInfo) beforeSave() {}

func (x *TransportEndpointInfo) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.NetProto)
	m.Save(1, &x.TransProto)
	m.Save(2, &x.ID)
	m.Save(3, &x.BindNICID)
	m.Save(4, &x.BindAddr)
	m.Save(5, &x.RegisterNICID)
}

func (x *TransportEndpointInfo) afterLoad() {}

func (x *TransportEndpointInfo) StateLoad(m state.Source) {
	m.Load(0, &x.NetProto)
	m.Load(1, &x.TransProto)
	m.Load(2, &x.ID)
	m.Load(3, &x.BindNICID)
	m.Load(4, &x.BindAddr)
	m.Load(5, &x.RegisterNICID)
}

func (x *multiPortEndpoint) StateTypeName() string {
	return "pkg/tcpip/stack.multiPortEndpoint"
}

func (x *multiPortEndpoint) StateFields() []string {
	return []string{
		"demux",
		"netProto",
		"transProto",
		"endpoints",
		"flags",
	}
}

func (x *multiPortEndpoint) beforeSave() {}

func (x *multiPortEndpoint) StateSave(m state.Sink) {
	x.beforeSave()
	m.Save(0, &x.demux)
	m.Save(1, &x.netProto)
	m.Save(2, &x.transProto)
	m.Save(3, &x.endpoints)
	m.Save(4, &x.flags)
}

func (x *multiPortEndpoint) afterLoad() {}

func (x *multiPortEndpoint) StateLoad(m state.Source) {
	m.Load(0, &x.demux)
	m.Load(1, &x.netProto)
	m.Load(2, &x.transProto)
	m.Load(3, &x.endpoints)
	m.Load(4, &x.flags)
}

func init() {
	state.Register((*linkAddrEntryList)(nil))
	state.Register((*linkAddrEntryEntry)(nil))
	state.Register((*PacketBufferList)(nil))
	state.Register((*PacketBufferEntry)(nil))
	state.Register((*TransportEndpointID)(nil))
	state.Register((*GSOType)(nil))
	state.Register((*GSO)(nil))
	state.Register((*TransportEndpointInfo)(nil))
	state.Register((*multiPortEndpoint)(nil))
}
