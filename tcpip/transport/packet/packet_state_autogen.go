// automatically generated by stateify.

package packet

import (
	"gvisor.dev/gvisor/pkg/state"
	"gvisor.dev/gvisor/pkg/tcpip/buffer"
)

func (p *packet) StateTypeName() string {
	return "pkg/tcpip/transport/packet.packet"
}

func (p *packet) StateFields() []string {
	return []string{
		"packetEntry",
		"data",
		"timestampNS",
		"senderAddr",
		"packetInfo",
	}
}

func (p *packet) beforeSave() {}

func (p *packet) StateSave(stateSinkObject state.Sink) {
	p.beforeSave()
	var dataValue buffer.VectorisedView = p.saveData()
	stateSinkObject.SaveValue(1, dataValue)
	stateSinkObject.Save(0, &p.packetEntry)
	stateSinkObject.Save(2, &p.timestampNS)
	stateSinkObject.Save(3, &p.senderAddr)
	stateSinkObject.Save(4, &p.packetInfo)
}

func (p *packet) afterLoad() {}

func (p *packet) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &p.packetEntry)
	stateSourceObject.Load(2, &p.timestampNS)
	stateSourceObject.Load(3, &p.senderAddr)
	stateSourceObject.Load(4, &p.packetInfo)
	stateSourceObject.LoadValue(1, new(buffer.VectorisedView), func(y interface{}) { p.loadData(y.(buffer.VectorisedView)) })
}

func (e *endpoint) StateTypeName() string {
	return "pkg/tcpip/transport/packet.endpoint"
}

func (e *endpoint) StateFields() []string {
	return []string{
		"TransportEndpointInfo",
		"netProto",
		"waiterQueue",
		"cooked",
		"rcvList",
		"rcvBufSizeMax",
		"rcvBufSize",
		"rcvClosed",
		"sndBufSize",
		"sndBufSizeMax",
		"closed",
		"bound",
		"boundNIC",
		"linger",
		"lastError",
	}
}

func (e *endpoint) StateSave(stateSinkObject state.Sink) {
	e.beforeSave()
	var rcvBufSizeMaxValue int = e.saveRcvBufSizeMax()
	stateSinkObject.SaveValue(5, rcvBufSizeMaxValue)
	var lastErrorValue string = e.saveLastError()
	stateSinkObject.SaveValue(14, lastErrorValue)
	stateSinkObject.Save(0, &e.TransportEndpointInfo)
	stateSinkObject.Save(1, &e.netProto)
	stateSinkObject.Save(2, &e.waiterQueue)
	stateSinkObject.Save(3, &e.cooked)
	stateSinkObject.Save(4, &e.rcvList)
	stateSinkObject.Save(6, &e.rcvBufSize)
	stateSinkObject.Save(7, &e.rcvClosed)
	stateSinkObject.Save(8, &e.sndBufSize)
	stateSinkObject.Save(9, &e.sndBufSizeMax)
	stateSinkObject.Save(10, &e.closed)
	stateSinkObject.Save(11, &e.bound)
	stateSinkObject.Save(12, &e.boundNIC)
	stateSinkObject.Save(13, &e.linger)
}

func (e *endpoint) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &e.TransportEndpointInfo)
	stateSourceObject.Load(1, &e.netProto)
	stateSourceObject.Load(2, &e.waiterQueue)
	stateSourceObject.Load(3, &e.cooked)
	stateSourceObject.Load(4, &e.rcvList)
	stateSourceObject.Load(6, &e.rcvBufSize)
	stateSourceObject.Load(7, &e.rcvClosed)
	stateSourceObject.Load(8, &e.sndBufSize)
	stateSourceObject.Load(9, &e.sndBufSizeMax)
	stateSourceObject.Load(10, &e.closed)
	stateSourceObject.Load(11, &e.bound)
	stateSourceObject.Load(12, &e.boundNIC)
	stateSourceObject.Load(13, &e.linger)
	stateSourceObject.LoadValue(5, new(int), func(y interface{}) { e.loadRcvBufSizeMax(y.(int)) })
	stateSourceObject.LoadValue(14, new(string), func(y interface{}) { e.loadLastError(y.(string)) })
	stateSourceObject.AfterLoad(e.afterLoad)
}

func (p *packetList) StateTypeName() string {
	return "pkg/tcpip/transport/packet.packetList"
}

func (p *packetList) StateFields() []string {
	return []string{
		"head",
		"tail",
	}
}

func (p *packetList) beforeSave() {}

func (p *packetList) StateSave(stateSinkObject state.Sink) {
	p.beforeSave()
	stateSinkObject.Save(0, &p.head)
	stateSinkObject.Save(1, &p.tail)
}

func (p *packetList) afterLoad() {}

func (p *packetList) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &p.head)
	stateSourceObject.Load(1, &p.tail)
}

func (p *packetEntry) StateTypeName() string {
	return "pkg/tcpip/transport/packet.packetEntry"
}

func (p *packetEntry) StateFields() []string {
	return []string{
		"next",
		"prev",
	}
}

func (p *packetEntry) beforeSave() {}

func (p *packetEntry) StateSave(stateSinkObject state.Sink) {
	p.beforeSave()
	stateSinkObject.Save(0, &p.next)
	stateSinkObject.Save(1, &p.prev)
}

func (p *packetEntry) afterLoad() {}

func (p *packetEntry) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &p.next)
	stateSourceObject.Load(1, &p.prev)
}

func init() {
	state.Register((*packet)(nil))
	state.Register((*endpoint)(nil))
	state.Register((*packetList)(nil))
	state.Register((*packetEntry)(nil))
}
