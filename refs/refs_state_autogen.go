// automatically generated by stateify.

package refs

import (
	"gvisor.dev/gvisor/pkg/state"
)

func (w *WeakRef) StateTypeName() string {
	return "pkg/refs.WeakRef"
}

func (w *WeakRef) StateFields() []string {
	return []string{
		"obj",
		"user",
	}
}

func (w *WeakRef) beforeSave() {}

func (w *WeakRef) StateSave(stateSinkObject state.Sink) {
	w.beforeSave()
	var objValue savedReference = w.saveObj()
	stateSinkObject.SaveValue(0, objValue)
	stateSinkObject.Save(1, &w.user)
}

func (w *WeakRef) afterLoad() {}

func (w *WeakRef) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(1, &w.user)
	stateSourceObject.LoadValue(0, new(savedReference), func(y interface{}) { w.loadObj(y.(savedReference)) })
}

func (a *AtomicRefCount) StateTypeName() string {
	return "pkg/refs.AtomicRefCount"
}

func (a *AtomicRefCount) StateFields() []string {
	return []string{
		"refCount",
		"name",
		"stack",
	}
}

func (a *AtomicRefCount) beforeSave() {}

func (a *AtomicRefCount) StateSave(stateSinkObject state.Sink) {
	a.beforeSave()
	stateSinkObject.Save(0, &a.refCount)
	stateSinkObject.Save(1, &a.name)
	stateSinkObject.Save(2, &a.stack)
}

func (a *AtomicRefCount) afterLoad() {}

func (a *AtomicRefCount) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &a.refCount)
	stateSourceObject.Load(1, &a.name)
	stateSourceObject.Load(2, &a.stack)
}

func (s *savedReference) StateTypeName() string {
	return "pkg/refs.savedReference"
}

func (s *savedReference) StateFields() []string {
	return []string{
		"obj",
	}
}

func (s *savedReference) beforeSave() {}

func (s *savedReference) StateSave(stateSinkObject state.Sink) {
	s.beforeSave()
	stateSinkObject.Save(0, &s.obj)
}

func (s *savedReference) afterLoad() {}

func (s *savedReference) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &s.obj)
}

func (w *weakRefList) StateTypeName() string {
	return "pkg/refs.weakRefList"
}

func (w *weakRefList) StateFields() []string {
	return []string{
		"head",
		"tail",
	}
}

func (w *weakRefList) beforeSave() {}

func (w *weakRefList) StateSave(stateSinkObject state.Sink) {
	w.beforeSave()
	stateSinkObject.Save(0, &w.head)
	stateSinkObject.Save(1, &w.tail)
}

func (w *weakRefList) afterLoad() {}

func (w *weakRefList) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &w.head)
	stateSourceObject.Load(1, &w.tail)
}

func (w *weakRefEntry) StateTypeName() string {
	return "pkg/refs.weakRefEntry"
}

func (w *weakRefEntry) StateFields() []string {
	return []string{
		"next",
		"prev",
	}
}

func (w *weakRefEntry) beforeSave() {}

func (w *weakRefEntry) StateSave(stateSinkObject state.Sink) {
	w.beforeSave()
	stateSinkObject.Save(0, &w.next)
	stateSinkObject.Save(1, &w.prev)
}

func (w *weakRefEntry) afterLoad() {}

func (w *weakRefEntry) StateLoad(stateSourceObject state.Source) {
	stateSourceObject.Load(0, &w.next)
	stateSourceObject.Load(1, &w.prev)
}

func init() {
	state.Register((*WeakRef)(nil))
	state.Register((*AtomicRefCount)(nil))
	state.Register((*savedReference)(nil))
	state.Register((*weakRefList)(nil))
	state.Register((*weakRefEntry)(nil))
}
