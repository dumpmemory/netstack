// automatically generated by stateify.

package linux

import (
	"gvisor.dev/gvisor/pkg/state"
)

func (x *IOEvent) beforeSave() {}
func (x *IOEvent) save(m state.Map) {
	x.beforeSave()
	m.Save("Data", &x.Data)
	m.Save("Obj", &x.Obj)
	m.Save("Result", &x.Result)
	m.Save("Result2", &x.Result2)
}

func (x *IOEvent) afterLoad() {}
func (x *IOEvent) load(m state.Map) {
	m.Load("Data", &x.Data)
	m.Load("Obj", &x.Obj)
	m.Load("Result", &x.Result)
	m.Load("Result2", &x.Result2)
}

func (x *BPFInstruction) beforeSave() {}
func (x *BPFInstruction) save(m state.Map) {
	x.beforeSave()
	m.Save("OpCode", &x.OpCode)
	m.Save("JumpIfTrue", &x.JumpIfTrue)
	m.Save("JumpIfFalse", &x.JumpIfFalse)
	m.Save("K", &x.K)
}

func (x *BPFInstruction) afterLoad() {}
func (x *BPFInstruction) load(m state.Map) {
	m.Load("OpCode", &x.OpCode)
	m.Load("JumpIfTrue", &x.JumpIfTrue)
	m.Load("JumpIfFalse", &x.JumpIfFalse)
	m.Load("K", &x.K)
}

func (x *KernelTermios) beforeSave() {}
func (x *KernelTermios) save(m state.Map) {
	x.beforeSave()
	m.Save("InputFlags", &x.InputFlags)
	m.Save("OutputFlags", &x.OutputFlags)
	m.Save("ControlFlags", &x.ControlFlags)
	m.Save("LocalFlags", &x.LocalFlags)
	m.Save("LineDiscipline", &x.LineDiscipline)
	m.Save("ControlCharacters", &x.ControlCharacters)
	m.Save("InputSpeed", &x.InputSpeed)
	m.Save("OutputSpeed", &x.OutputSpeed)
}

func (x *KernelTermios) afterLoad() {}
func (x *KernelTermios) load(m state.Map) {
	m.Load("InputFlags", &x.InputFlags)
	m.Load("OutputFlags", &x.OutputFlags)
	m.Load("ControlFlags", &x.ControlFlags)
	m.Load("LocalFlags", &x.LocalFlags)
	m.Load("LineDiscipline", &x.LineDiscipline)
	m.Load("ControlCharacters", &x.ControlCharacters)
	m.Load("InputSpeed", &x.InputSpeed)
	m.Load("OutputSpeed", &x.OutputSpeed)
}

func (x *WindowSize) beforeSave() {}
func (x *WindowSize) save(m state.Map) {
	x.beforeSave()
	m.Save("Rows", &x.Rows)
	m.Save("Cols", &x.Cols)
}

func (x *WindowSize) afterLoad() {}
func (x *WindowSize) load(m state.Map) {
	m.Load("Rows", &x.Rows)
	m.Load("Cols", &x.Cols)
}

func init() {
	state.Register("pkg/abi/linux.IOEvent", (*IOEvent)(nil), state.Fns{Save: (*IOEvent).save, Load: (*IOEvent).load})
	state.Register("pkg/abi/linux.BPFInstruction", (*BPFInstruction)(nil), state.Fns{Save: (*BPFInstruction).save, Load: (*BPFInstruction).load})
	state.Register("pkg/abi/linux.KernelTermios", (*KernelTermios)(nil), state.Fns{Save: (*KernelTermios).save, Load: (*KernelTermios).load})
	state.Register("pkg/abi/linux.WindowSize", (*WindowSize)(nil), state.Fns{Save: (*WindowSize).save, Load: (*WindowSize).load})
}
